<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-3.0.xsd">
   
    <!-- 加载除SpringMvc用的Bean -->

    <!-- 打开 annotation -->       
    <context:annotation-config/>
    <!-- 扫描符合@Service @Repository的类 作为Spring容器管理的Bean -->
    <!--  Spring MVC启动时的配置文件，包含组件扫描、url映射以及设置freemarker参数，
		    让spring不扫描带有@Service注解的类。为什么要这样设置？因为servlet-context.xml与service-context.xml不是同时加载，
		    如果不进行这样的设置，那么，spring就会将所有带@Service注解的类都扫描到容器中，等到加载service-context.xml的时候，
		    会因为容器已经存在Service类，使得cglib将不对Service进行代理，直接导致的结果就是在service-context中的事务配置不起作用，
		    发生异常时，无法对数据进行回滚。
		    
		    
		    如果在springmvc配置文件，不使用cn.javass.demo.web.controller前缀，
		    而是使用cn.javass.demo，则service、dao层的bean可能也重新加载了，
		    但事务的AOP代理没有配置在springmvc配置文件中，从而造成新加载的bean覆盖了老的bean，
		    造成事务失效。只要使用use-default-filters=“false”禁用掉默认的行为就可以了。
     -->
	<context:component-scan base-package="jintli.iwantplay" use-default-filters="false">
	    <context:include-filter type="regex" expression="jintli.iwantplay.(service|dao).*"/>
	</context:component-scan>
	<!-- 加载Properties -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:configuration.properties</value>
				<value>classpath:iwantplay.properties</value>
			</list>
		</property>	
	</bean>
	<!-- DBCP数据源 -->
	<bean id="MyDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="maxWait" value="${dbcp.maxWait}" />
	</bean>
	<!-- SqlSessionFactory -->
	<bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="configLocation" value="classpath:mybatis-configuration.xml" />  
	    <property name="dataSource" ref="MyDataSource" />
	    <property name="mapperLocations" value="/WEB-INF/mapper/*Mapper.xml"/>
	</bean>
	<!-- SqlSessionTemplate -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> 
	  <constructor-arg index="0" ref="SqlSessionFactory" />  
	  <!-- <constructor-arg index="1" value="BATCH" />如果想要进行批量操作可加入这个属性 -->
	</bean>
	<!-- 注册所有的Mapper接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="jintli.iwantplay.mapper" />
	</bean>
	<!-- 注册事务管理类-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="MyDataSource"/>
	</bean>
    <!-- 开启事务行为 -->
  	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>